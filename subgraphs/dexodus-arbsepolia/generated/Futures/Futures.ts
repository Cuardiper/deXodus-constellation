// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClosePosition extends ethereum.Event {
  get params(): ClosePosition__Params {
    return new ClosePosition__Params(this);
  }
}

export class ClosePosition__Params {
  _event: ClosePosition;

  constructor(event: ClosePosition) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class CreateFuture extends ethereum.Event {
  get params(): CreateFuture__Params {
    return new CreateFuture__Params(this);
  }
}

export class CreateFuture__Params {
  _event: CreateFuture;

  constructor(event: CreateFuture) {
    this._event = event;
  }

  get futureId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get market(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class DecreaseCollateral extends ethereum.Event {
  get params(): DecreaseCollateral__Params {
    return new DecreaseCollateral__Params(this);
  }
}

export class DecreaseCollateral__Params {
  _event: DecreaseCollateral;

  constructor(event: DecreaseCollateral) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class DecreasePosition extends ethereum.Event {
  get params(): DecreasePosition__Params {
    return new DecreasePosition__Params(this);
  }
}

export class DecreasePosition__Params {
  _event: DecreasePosition;

  constructor(event: DecreasePosition) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class IncreaseCollateral extends ethereum.Event {
  get params(): IncreaseCollateral__Params {
    return new IncreaseCollateral__Params(this);
  }
}

export class IncreaseCollateral__Params {
  _event: IncreaseCollateral;

  constructor(event: IncreaseCollateral) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class IncreasePosition extends ethereum.Event {
  get params(): IncreasePosition__Params {
    return new IncreasePosition__Params(this);
  }
}

export class IncreasePosition__Params {
  _event: IncreasePosition;

  constructor(event: IncreasePosition) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class InitiateTrade extends ethereum.Event {
  get params(): InitiateTrade__Params {
    return new InitiateTrade__Params(this);
  }
}

export class InitiateTrade__Params {
  _event: InitiateTrade;

  constructor(event: InitiateTrade) {
    this._event = event;
  }

  get msgSender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get futureId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get txType(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feedId(): string {
    return this._event.parameters[6].value.toString();
  }
}

export class LiquidatePosition extends ethereum.Event {
  get params(): LiquidatePosition__Params {
    return new LiquidatePosition__Params(this);
  }
}

export class LiquidatePosition__Params {
  _event: LiquidatePosition;

  constructor(event: LiquidatePosition) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class OpenPosition extends ethereum.Event {
  get params(): OpenPosition__Params {
    return new OpenPosition__Params(this);
  }
}

export class OpenPosition__Params {
  _event: OpenPosition;

  constructor(event: OpenPosition) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get positionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get startedAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liqPrice(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get long(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get currentPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class PriceUpdate extends ethereum.Event {
  get params(): PriceUpdate__Params {
    return new PriceUpdate__Params(this);
  }
}

export class PriceUpdate__Params {
  _event: PriceUpdate;

  constructor(event: PriceUpdate) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdatedGovernance extends ethereum.Event {
  get params(): UpdatedGovernance__Params {
    return new UpdatedGovernance__Params(this);
  }
}

export class UpdatedGovernance__Params {
  _event: UpdatedGovernance;

  constructor(event: UpdatedGovernance) {
    this._event = event;
  }

  get oldGovernance(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newGovernance(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Futures__IsPositionLiquidableInput_positionStruct extends ethereum.Tuple {
  get positionId(): BigInt {
    return this[0].toBigInt();
  }

  get startedAt(): BigInt {
    return this[1].toBigInt();
  }

  get size(): BigInt {
    return this[2].toBigInt();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[4].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[5].toBigInt();
  }

  get long(): boolean {
    return this[6].toBoolean();
  }

  get marketId(): BigInt {
    return this[7].toBigInt();
  }
}

export class Futures__calcLiquidationPriceInput_positionStruct extends ethereum.Tuple {
  get positionId(): BigInt {
    return this[0].toBigInt();
  }

  get startedAt(): BigInt {
    return this[1].toBigInt();
  }

  get size(): BigInt {
    return this[2].toBigInt();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[4].toBigInt();
  }

  get liqPrice(): BigInt {
    return this[5].toBigInt();
  }

  get long(): boolean {
    return this[6].toBoolean();
  }

  get marketId(): BigInt {
    return this[7].toBigInt();
  }
}

export class Futures__checkCallbackResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Futures__checkLogResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getPerformData(): Bytes {
    return this.value1;
  }
}

export class Futures__checkLogInputLogStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get txHash(): Bytes {
    return this[2].toBytes();
  }

  get blockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get blockHash(): Bytes {
    return this[4].toBytes();
  }

  get source(): Address {
    return this[5].toAddress();
  }

  get topics(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class Futures__getTraderPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getStartedAt(): BigInt {
    return this.value0;
  }

  getSize(): BigInt {
    return this.value1;
  }

  getCollateral(): BigInt {
    return this.value2;
  }

  getEntryPrice(): BigInt {
    return this.value3;
  }

  getLiqPrice(): BigInt {
    return this.value4;
  }

  getLong(): boolean {
    return this.value5;
  }

  getMarketId(): BigInt {
    return this.value6;
  }
}

export class Futures__longPositionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getPositionId(): BigInt {
    return this.value0;
  }

  getStartedAt(): BigInt {
    return this.value1;
  }

  getSize(): BigInt {
    return this.value2;
  }

  getCollateral(): BigInt {
    return this.value3;
  }

  getEntryPrice(): BigInt {
    return this.value4;
  }

  getLiqPrice(): BigInt {
    return this.value5;
  }

  getLong(): boolean {
    return this.value6;
  }

  getMarketId(): BigInt {
    return this.value7;
  }
}

export class Futures__shortPositionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getPositionId(): BigInt {
    return this.value0;
  }

  getStartedAt(): BigInt {
    return this.value1;
  }

  getSize(): BigInt {
    return this.value2;
  }

  getCollateral(): BigInt {
    return this.value3;
  }

  getEntryPrice(): BigInt {
    return this.value4;
  }

  getLiqPrice(): BigInt {
    return this.value5;
  }

  getLong(): boolean {
    return this.value6;
  }

  getMarketId(): BigInt {
    return this.value7;
  }
}

export class Futures extends ethereum.SmartContract {
  static bind(address: Address): Futures {
    return new Futures("Futures", address);
  }

  FEE_ADDRESS(): Address {
    let result = super.call("FEE_ADDRESS", "FEE_ADDRESS():(address)", []);

    return result[0].toAddress();
  }

  try_FEE_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall("FEE_ADDRESS", "FEE_ADDRESS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  IsPositionLiquidable(
    _position: Futures__IsPositionLiquidableInput_positionStruct,
    _currentPrice: BigInt
  ): boolean {
    let result = super.call(
      "IsPositionLiquidable",
      "IsPositionLiquidable((uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256),uint256):(bool)",
      [
        ethereum.Value.fromTuple(_position),
        ethereum.Value.fromUnsignedBigInt(_currentPrice)
      ]
    );

    return result[0].toBoolean();
  }

  try_IsPositionLiquidable(
    _position: Futures__IsPositionLiquidableInput_positionStruct,
    _currentPrice: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "IsPositionLiquidable",
      "IsPositionLiquidable((uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256),uint256):(bool)",
      [
        ethereum.Value.fromTuple(_position),
        ethereum.Value.fromUnsignedBigInt(_currentPrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  PERCENTAGE(): BigInt {
    let result = super.call("PERCENTAGE", "PERCENTAGE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PERCENTAGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PERCENTAGE", "PERCENTAGE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STRING_DATASTREAMS_FEEDLABEL(): string {
    let result = super.call(
      "STRING_DATASTREAMS_FEEDLABEL",
      "STRING_DATASTREAMS_FEEDLABEL():(string)",
      []
    );

    return result[0].toString();
  }

  try_STRING_DATASTREAMS_FEEDLABEL(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "STRING_DATASTREAMS_FEEDLABEL",
      "STRING_DATASTREAMS_FEEDLABEL():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  STRING_DATASTREAMS_QUERYLABEL(): string {
    let result = super.call(
      "STRING_DATASTREAMS_QUERYLABEL",
      "STRING_DATASTREAMS_QUERYLABEL():(string)",
      []
    );

    return result[0].toString();
  }

  try_STRING_DATASTREAMS_QUERYLABEL(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "STRING_DATASTREAMS_QUERYLABEL",
      "STRING_DATASTREAMS_QUERYLABEL():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowingFee(): BigInt {
    let result = super.call("borrowingFee", "borrowingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_borrowingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowingFee", "borrowingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcLiquidationPrice(
    _position: Futures__calcLiquidationPriceInput_positionStruct
  ): BigInt {
    let result = super.call(
      "calcLiquidationPrice",
      "calcLiquidationPrice((uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_position)]
    );

    return result[0].toBigInt();
  }

  try_calcLiquidationPrice(
    _position: Futures__calcLiquidationPriceInput_positionStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calcLiquidationPrice",
      "calcLiquidationPrice((uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)):(uint256)",
      [ethereum.Value.fromTuple(_position)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkCallback(
    values: Array<Bytes>,
    extraData: Bytes
  ): Futures__checkCallbackResult {
    let result = super.call(
      "checkCallback",
      "checkCallback(bytes[],bytes):(bool,bytes)",
      [
        ethereum.Value.fromBytesArray(values),
        ethereum.Value.fromBytes(extraData)
      ]
    );

    return new Futures__checkCallbackResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkCallback(
    values: Array<Bytes>,
    extraData: Bytes
  ): ethereum.CallResult<Futures__checkCallbackResult> {
    let result = super.tryCall(
      "checkCallback",
      "checkCallback(bytes[],bytes):(bool,bytes)",
      [
        ethereum.Value.fromBytesArray(values),
        ethereum.Value.fromBytes(extraData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Futures__checkCallbackResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  checkLog(
    log: Futures__checkLogInputLogStruct,
    param1: Bytes
  ): Futures__checkLogResult {
    let result = super.call(
      "checkLog",
      "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(log), ethereum.Value.fromBytes(param1)]
    );

    return new Futures__checkLogResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkLog(
    log: Futures__checkLogInputLogStruct,
    param1: Bytes
  ): ethereum.CallResult<Futures__checkLogResult> {
    let result = super.tryCall(
      "checkLog",
      "checkLog((uint256,uint256,bytes32,uint256,bytes32,address,bytes32[],bytes),bytes):(bool,bytes)",
      [ethereum.Value.fromTuple(log), ethereum.Value.fromBytes(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Futures__checkLogResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  counter(): BigInt {
    let result = super.call("counter", "counter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_counter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("counter", "counter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executionFee(): BigInt {
    let result = super.call("executionFee", "executionFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_executionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("executionFee", "executionFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feedIds(param0: BigInt): string {
    let result = super.call("feedIds", "feedIds(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_feedIds(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("feedIds", "feedIds(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  fundingFee(): BigInt {
    let result = super.call("fundingFee", "fundingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundingFee", "fundingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  futureId(param0: string): BigInt {
    let result = super.call("futureId", "futureId(string):(uint256)", [
      ethereum.Value.fromString(param0)
    ]);

    return result[0].toBigInt();
  }

  try_futureId(param0: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("futureId", "futureId(string):(uint256)", [
      ethereum.Value.fromString(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  futureMarket(param0: BigInt): string {
    let result = super.call("futureMarket", "futureMarket(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_futureMarket(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "futureMarket",
      "futureMarket(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTraderPosition(
    _futureId: BigInt,
    _user: Address,
    _long: boolean
  ): Futures__getTraderPositionResult {
    let result = super.call(
      "getTraderPosition",
      "getTraderPosition(uint256,address,bool):(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_futureId),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromBoolean(_long)
      ]
    );

    return new Futures__getTraderPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt()
    );
  }

  try_getTraderPosition(
    _futureId: BigInt,
    _user: Address,
    _long: boolean
  ): ethereum.CallResult<Futures__getTraderPositionResult> {
    let result = super.tryCall(
      "getTraderPosition",
      "getTraderPosition(uint256,address,bool):(uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_futureId),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromBoolean(_long)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Futures__getTraderPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt()
      )
    );
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidationThreshold(): BigInt {
    let result = super.call(
      "liquidationThreshold",
      "liquidationThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationThreshold",
      "liquidationThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityPool(): Address {
    let result = super.call("liquidityPool", "liquidityPool():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPool",
      "liquidityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  longPositions(param0: BigInt, param1: Address): Futures__longPositionsResult {
    let result = super.call(
      "longPositions",
      "longPositions(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new Futures__longPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_longPositions(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Futures__longPositionsResult> {
    let result = super.tryCall(
      "longPositions",
      "longPositions(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Futures__longPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }

  makerTradingFee(): BigInt {
    let result = super.call(
      "makerTradingFee",
      "makerTradingFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_makerTradingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "makerTradingFee",
      "makerTradingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionIdCounter(): BigInt {
    let result = super.call(
      "positionIdCounter",
      "positionIdCounter():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_positionIdCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionIdCounter",
      "positionIdCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionNetValue(
    _price: BigInt,
    _trader: Address,
    _long: boolean,
    _futureId: BigInt
  ): BigInt {
    let result = super.call(
      "positionNetValue",
      "positionNetValue(uint256,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromAddress(_trader),
        ethereum.Value.fromBoolean(_long),
        ethereum.Value.fromUnsignedBigInt(_futureId)
      ]
    );

    return result[0].toBigInt();
  }

  try_positionNetValue(
    _price: BigInt,
    _trader: Address,
    _long: boolean,
    _futureId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionNetValue",
      "positionNetValue(uint256,address,bool,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromAddress(_trader),
        ethereum.Value.fromBoolean(_long),
        ethereum.Value.fromUnsignedBigInt(_futureId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  priceFeed(): Address {
    let result = super.call("priceFeed", "priceFeed():(address)", []);

    return result[0].toAddress();
  }

  try_priceFeed(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceFeed", "priceFeed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceImpactFee(): BigInt {
    let result = super.call("priceImpactFee", "priceImpactFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_priceImpactFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "priceImpactFee",
      "priceImpactFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shortPositions(
    param0: BigInt,
    param1: Address
  ): Futures__shortPositionsResult {
    let result = super.call(
      "shortPositions",
      "shortPositions(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return new Futures__shortPositionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_shortPositions(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Futures__shortPositionsResult> {
    let result = super.tryCall(
      "shortPositions",
      "shortPositions(uint256,address):(uint256,uint256,uint256,uint256,uint256,uint256,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Futures__shortPositionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }

  takerTradingFee(): BigInt {
    let result = super.call(
      "takerTradingFee",
      "takerTradingFee():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_takerTradingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "takerTradingFee",
      "takerTradingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validFuture(_futureId: BigInt): boolean {
    let result = super.call("validFuture", "validFuture(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_futureId)
    ]);

    return result[0].toBoolean();
  }

  try_validFuture(_futureId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("validFuture", "validFuture(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_futureId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifier(): Address {
    let result = super.call("verifier", "verifier():(address)", []);

    return result[0].toAddress();
  }

  try_verifier(): ethereum.CallResult<Address> {
    let result = super.tryCall("verifier", "verifier():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wbtc(): Address {
    let result = super.call("wbtc", "wbtc():(address)", []);

    return result[0].toAddress();
  }

  try_wbtc(): ethereum.CallResult<Address> {
    let result = super.tryCall("wbtc", "wbtc():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _liquidityPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _wbtc(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _liquidationThreshold(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class CheckLogCall extends ethereum.Call {
  get inputs(): CheckLogCall__Inputs {
    return new CheckLogCall__Inputs(this);
  }

  get outputs(): CheckLogCall__Outputs {
    return new CheckLogCall__Outputs(this);
  }
}

export class CheckLogCall__Inputs {
  _call: CheckLogCall;

  constructor(call: CheckLogCall) {
    this._call = call;
  }

  get log(): CheckLogCallLogStruct {
    return changetype<CheckLogCallLogStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get value1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CheckLogCall__Outputs {
  _call: CheckLogCall;

  constructor(call: CheckLogCall) {
    this._call = call;
  }

  get upkeepNeeded(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get performData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class CheckLogCallLogStruct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get timestamp(): BigInt {
    return this[1].toBigInt();
  }

  get txHash(): Bytes {
    return this[2].toBytes();
  }

  get blockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get blockHash(): Bytes {
    return this[4].toBytes();
  }

  get source(): Address {
    return this[5].toAddress();
  }

  get topics(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get data(): Bytes {
    return this[7].toBytes();
  }
}

export class CreateFutureCall extends ethereum.Call {
  get inputs(): CreateFutureCall__Inputs {
    return new CreateFutureCall__Inputs(this);
  }

  get outputs(): CreateFutureCall__Outputs {
    return new CreateFutureCall__Outputs(this);
  }
}

export class CreateFutureCall__Inputs {
  _call: CreateFutureCall;

  constructor(call: CreateFutureCall) {
    this._call = call;
  }

  get _market(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateFutureCall__Outputs {
  _call: CreateFutureCall;

  constructor(call: CreateFutureCall) {
    this._call = call;
  }
}

export class DecreaseCollateralCall extends ethereum.Call {
  get inputs(): DecreaseCollateralCall__Inputs {
    return new DecreaseCollateralCall__Inputs(this);
  }

  get outputs(): DecreaseCollateralCall__Outputs {
    return new DecreaseCollateralCall__Outputs(this);
  }
}

export class DecreaseCollateralCall__Inputs {
  _call: DecreaseCollateralCall;

  constructor(call: DecreaseCollateralCall) {
    this._call = call;
  }

  get _futureId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _percentageDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _long(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get feedId(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class DecreaseCollateralCall__Outputs {
  _call: DecreaseCollateralCall;

  constructor(call: DecreaseCollateralCall) {
    this._call = call;
  }
}

export class DecreasePositionCall extends ethereum.Call {
  get inputs(): DecreasePositionCall__Inputs {
    return new DecreasePositionCall__Inputs(this);
  }

  get outputs(): DecreasePositionCall__Outputs {
    return new DecreasePositionCall__Outputs(this);
  }
}

export class DecreasePositionCall__Inputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }

  get _futureId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _percentageDecrease(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _long(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get feedId(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class DecreasePositionCall__Outputs {
  _call: DecreasePositionCall;

  constructor(call: DecreasePositionCall) {
    this._call = call;
  }
}

export class IncreaseCollateralCall extends ethereum.Call {
  get inputs(): IncreaseCollateralCall__Inputs {
    return new IncreaseCollateralCall__Inputs(this);
  }

  get outputs(): IncreaseCollateralCall__Outputs {
    return new IncreaseCollateralCall__Outputs(this);
  }
}

export class IncreaseCollateralCall__Inputs {
  _call: IncreaseCollateralCall;

  constructor(call: IncreaseCollateralCall) {
    this._call = call;
  }

  get _futureId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _long(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get feedId(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class IncreaseCollateralCall__Outputs {
  _call: IncreaseCollateralCall;

  constructor(call: IncreaseCollateralCall) {
    this._call = call;
  }
}

export class IncreasePositionCall extends ethereum.Call {
  get inputs(): IncreasePositionCall__Inputs {
    return new IncreasePositionCall__Inputs(this);
  }

  get outputs(): IncreasePositionCall__Outputs {
    return new IncreasePositionCall__Outputs(this);
  }
}

export class IncreasePositionCall__Inputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }

  get _futureId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _size(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _long(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get feedId(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class IncreasePositionCall__Outputs {
  _call: IncreasePositionCall;

  constructor(call: IncreasePositionCall) {
    this._call = call;
  }
}

export class LiquidatePositionCall extends ethereum.Call {
  get inputs(): LiquidatePositionCall__Inputs {
    return new LiquidatePositionCall__Inputs(this);
  }

  get outputs(): LiquidatePositionCall__Outputs {
    return new LiquidatePositionCall__Outputs(this);
  }
}

export class LiquidatePositionCall__Inputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }

  get _futureId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _trader(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _long(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class LiquidatePositionCall__Outputs {
  _call: LiquidatePositionCall;

  constructor(call: LiquidatePositionCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get performData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _newGovernance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetTradingFeesCall extends ethereum.Call {
  get inputs(): SetTradingFeesCall__Inputs {
    return new SetTradingFeesCall__Inputs(this);
  }

  get outputs(): SetTradingFeesCall__Outputs {
    return new SetTradingFeesCall__Outputs(this);
  }
}

export class SetTradingFeesCall__Inputs {
  _call: SetTradingFeesCall;

  constructor(call: SetTradingFeesCall) {
    this._call = call;
  }

  get _makerFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _takerFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetTradingFeesCall__Outputs {
  _call: SetTradingFeesCall;

  constructor(call: SetTradingFeesCall) {
    this._call = call;
  }
}

export class SetborrowingFeeCall extends ethereum.Call {
  get inputs(): SetborrowingFeeCall__Inputs {
    return new SetborrowingFeeCall__Inputs(this);
  }

  get outputs(): SetborrowingFeeCall__Outputs {
    return new SetborrowingFeeCall__Outputs(this);
  }
}

export class SetborrowingFeeCall__Inputs {
  _call: SetborrowingFeeCall;

  constructor(call: SetborrowingFeeCall) {
    this._call = call;
  }

  get _borrowingFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetborrowingFeeCall__Outputs {
  _call: SetborrowingFeeCall;

  constructor(call: SetborrowingFeeCall) {
    this._call = call;
  }
}

export class SetexecutionFeeCall extends ethereum.Call {
  get inputs(): SetexecutionFeeCall__Inputs {
    return new SetexecutionFeeCall__Inputs(this);
  }

  get outputs(): SetexecutionFeeCall__Outputs {
    return new SetexecutionFeeCall__Outputs(this);
  }
}

export class SetexecutionFeeCall__Inputs {
  _call: SetexecutionFeeCall;

  constructor(call: SetexecutionFeeCall) {
    this._call = call;
  }

  get _executionFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetexecutionFeeCall__Outputs {
  _call: SetexecutionFeeCall;

  constructor(call: SetexecutionFeeCall) {
    this._call = call;
  }
}

export class SetfundingFeeCall extends ethereum.Call {
  get inputs(): SetfundingFeeCall__Inputs {
    return new SetfundingFeeCall__Inputs(this);
  }

  get outputs(): SetfundingFeeCall__Outputs {
    return new SetfundingFeeCall__Outputs(this);
  }
}

export class SetfundingFeeCall__Inputs {
  _call: SetfundingFeeCall;

  constructor(call: SetfundingFeeCall) {
    this._call = call;
  }

  get _fundingFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetfundingFeeCall__Outputs {
  _call: SetfundingFeeCall;

  constructor(call: SetfundingFeeCall) {
    this._call = call;
  }
}

export class SetpriceImpactFeeCall extends ethereum.Call {
  get inputs(): SetpriceImpactFeeCall__Inputs {
    return new SetpriceImpactFeeCall__Inputs(this);
  }

  get outputs(): SetpriceImpactFeeCall__Outputs {
    return new SetpriceImpactFeeCall__Outputs(this);
  }
}

export class SetpriceImpactFeeCall__Inputs {
  _call: SetpriceImpactFeeCall;

  constructor(call: SetpriceImpactFeeCall) {
    this._call = call;
  }

  get _priceImpactFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetpriceImpactFeeCall__Outputs {
  _call: SetpriceImpactFeeCall;

  constructor(call: SetpriceImpactFeeCall) {
    this._call = call;
  }
}
